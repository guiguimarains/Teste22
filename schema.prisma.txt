generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model User {
  id          String        @id // Auto-synced by Adaptive when user logs in
  name        String?
  handle      String?
  image       String?
  submissions Submission[]
  AsoDocument AsoDocument[]
  Certificate Certificate[]
}

model Submission {
  id              String   @id @default(cuid())
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])
  status          String   @default("DRAFT") // DRAFT | COMPLETED
  step            Int      @default(0)
  // Stored as serialized JSON strings (see Prisma SQLite limitations)
  personal        String   @default("{}")
  familyHistory   String   @default("{}")
  personalHistory String   @default("{}")
  employers       String   @default("[]")
  physicalExam    String   @default("{}")
  evolution       String   @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId, status])
  @@index([createdAt])
}

model Appointment {
  id             String    @id @default(cuid())
  title          String
  patient        String
  nomeSocial     String?
  cpf            String?
  dataNascimento DateTime?
  razaoSocial    String?
  cnpj           String?
  contact        String?
  startAt        DateTime
  durationMins   Int       @default(30)
  status         String    @default("SCHEDULED") // SCHEDULED | DONE | CANCELED
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([startAt])
}

model ServiceRequest {
  id           String    @id @default(cuid())
  empresa      String
  solicitante  String
  paciente     String
  pacienteCpf  String?
  motivo       String
  agendadoPara DateTime
  status       String    @default("PENDENTE") // PENDENTE | ATENDIDO
  medica       String?
  motorista    String?
  realizadoEm  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([status, createdAt])
  @@index([agendadoPara])
}

model AsoDocument {
  id            String       @id @default(cuid())
  userId        String?
  user          User?        @relation(fields: [userId], references: [id])
  name          String       @default("")
  originalUrl   String
  editableUrl   String
  status        String       @default("PENDENTE") // PENDENTE | APTO | INAPTO
  fieldsJson    String       @default("{}")
  signedUrl     String?
  signedAt      DateTime?
  certificateId String?
  certificate   Certificate? @relation(fields: [certificateId], references: [id])
  createdAt     DateTime     @default(now())

  @@index([userId, createdAt])
  @@index([certificateId])
  @@index([status])
}

model Certificate {
  id           String        @id @default(cuid())
  userId       String?
  user         User?         @relation(fields: [userId], references: [id])
  name         String
  fileUrl      String
  createdAt    DateTime      @default(now())
  AsoDocuments AsoDocument[]

  @@index([userId, createdAt])
}
